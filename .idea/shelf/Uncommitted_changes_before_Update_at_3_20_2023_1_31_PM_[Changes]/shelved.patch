Index: app/src/main/java/com/example/giftly/handler/FireBaseClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n\r\n\r\n\r\npackage com.example.giftly.handler;\r\n\r\n//all of by beautiful imports\r\nimport static android.content.ContentValues.TAG;\r\nimport static com.example.giftly.Giftly.service;\r\n\r\nimport android.util.Log;\r\n\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.android.gms.tasks.Tasks;\r\nimport com.google.common.util.concurrent.ListenableFuture;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.firestore.DocumentReference;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.FieldPath;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.QuerySnapshot;\r\n\r\nimport org.checkerframework.checker.units.qual.A;\r\nimport org.w3c.dom.Document;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\nimport java.util.concurrent.Callable;\r\n\r\npublic class FireBaseClient {\r\n    //method wrappers because typing out that class name annoys me\r\n    public FirebaseAuth getAuth() {\r\n        return FirebaseAuth.getInstance();\r\n    }\r\n    public FirebaseFirestore getUser() {\r\n        return FirebaseFirestore.getInstance();\r\n    }\r\n\r\n    //sets firebase user doc corresponding to current Auth login to user\r\n    public void createProfile(User newUser) {\r\n        //create a Map with user data using firebase doc Schema\r\n        Map<String, Object> user = new HashMap<>();\r\n        user.put(\"Name\", newUser.fullName);\r\n        user.put(\"Events\", newUser.events);\r\n        user.put(\"Interests\", newUser.interests);\r\n        //reference the collection and call a set event using the authorized users ID\r\n        if (getAuth().getUid() != null)\r\n            getUser().collection(\"Users\").document(getAuth().getUid()).set(user);\r\n    }\r\n\r\n    //Sets the corresponding element of the array in firebase to the provided string\r\n    public ListenableFuture<String> setGift(String targetUserID, String eventID, String gift) {\r\n        class updateGiftList implements Callable<String> {\r\n            @Override\r\n            public String call() throws Exception {\r\n                DocumentReference targetEvent = getUser().collection(\"Events\").document(eventID);\r\n                //log status of document allocation\r\n                Task<DocumentSnapshot> callDB = targetEvent.get().addOnCompleteListener(task -> {\r\n                    if(task.isSuccessful()) {\r\n                        DocumentSnapshot doc = task.getResult();\r\n                        if (doc.exists()) {\r\n                            Log.d(TAG, \"DocumentSnapshot data: \" + doc.getData());\r\n                        }\r\n                        else {\r\n                            Log.d(TAG, \"No Such Document\");\r\n                        }\r\n                    }\r\n                    else {\r\n                        Log.d(TAG, \"get failed with\" + task.getException());\r\n                    }\r\n                }); //returns DocumentSnapshot\r\n                try {\r\n                    Tasks.await(callDB);\r\n                    DocumentSnapshot event = callDB.getResult();\r\n                    ArrayList<String> giftList;\r\n                    ArrayList<String> participants = (ArrayList<String>)event.get(\"participants\");\r\n                    //find the index of the current user in the event participants list\r\n                    assert participants != null;\r\n                    int userIndex = participants.indexOf(getAuth().getUid());\r\n                    if (event.contains(targetUserID)) {\r\n                        giftList = (ArrayList<String>)event.get(targetUserID);\r\n                        //check if the array is currently updated to handle the index of the user\r\n                        assert giftList != null;\r\n                        giftList.ensureCapacity(userIndex);\r\n                    }\r\n                    else {\r\n                        giftList = new ArrayList<>(userIndex+1);\r\n                    }\r\n                    giftList.set(userIndex,gift);\r\n                    getUser().collection(\"Events\").document(eventID).update(targetUserID, giftList);\r\n                }\r\n                catch (Exception e) {\r\n                    Log.d(TAG, e.toString());\r\n                    return \"Update Event Failed\";\r\n                }\r\n                return \"Updated gift list success\";\r\n            }\r\n        }\r\n\r\n\r\n        return service.submit(new updateGiftList());\r\n    }\r\n\r\n    public ListenableFuture<String> joinEvent(String eventID) {\r\n        return service.submit(new joinEventRequest(eventID));\r\n    }\r\n    private class joinEventRequest implements Callable<String> {\r\n        String eventID;\r\n        public joinEventRequest(String eventID) {\r\n            this.eventID = eventID;\r\n        }\r\n\r\n        @Override\r\n        public String call() throws Exception {\r\n            DocumentReference targetEvent = getUser().collection(\"Events\").document(eventID);\r\n            DocumentReference targetUser = getUser().collection(\"Users\").document(Objects.requireNonNull(getAuth().getUid()));\r\n            //log status of document allocation\r\n            Task<DocumentSnapshot> getEvent = targetEvent.get().addOnCompleteListener(task -> {\r\n                if(task.isSuccessful()) {\r\n                    DocumentSnapshot doc = task.getResult();\r\n                    if (doc.exists()) {\r\n                        Log.d(TAG, \"DocumentSnapshot data: \" + doc.getData());\r\n                    }\r\n                    else {\r\n                        Log.d(TAG, \"No Such Document\");\r\n                    }\r\n                }\r\n                else {\r\n                    Log.d(TAG, \"get failed with\" + task.getException());\r\n                }\r\n            }); //returns Event Snapshot\r\n\r\n            Task<DocumentSnapshot> getUser = targetEvent.get().addOnCompleteListener(task -> {\r\n                if(task.isSuccessful()) {\r\n                    DocumentSnapshot doc = task.getResult();\r\n                    if (doc.exists()) {\r\n                        Log.d(TAG, \"DocumentSnapshot data: \" + doc.getData());\r\n                    }\r\n                    else {\r\n                        Log.d(TAG, \"No Such Document\");\r\n                    }\r\n                }\r\n                else {\r\n                    Log.d(TAG, \"get failed with\" + task.getException());\r\n                }\r\n            }); //returns User Snapshot\r\n\r\n            try {\r\n                //wait for task completion\r\n                Tasks.await(getEvent);\r\n                Tasks.await(getUser);\r\n                if (getEvent.isSuccessful() && getUser.isSuccessful()) {\r\n                    DocumentSnapshot user = getUser.getResult();\r\n                    DocumentSnapshot event = getUser.getResult();\r\n\r\n                    ArrayList<String> participants = (ArrayList<String>) event.get(\"participants\");\r\n                    assert participants != null;\r\n                    participants.add(getAuth().getUid());\r\n                    targetEvent.update(\"participants\", participants);\r\n\r\n                    ArrayList<String> eventList = user.exists() ? (ArrayList<String>) user.get(\"eventList\") : new ArrayList<>(1);\r\n                    assert eventList != null;\r\n                    eventList.add(eventID);\r\n                    targetUser.update(\"eventList\", eventList);\r\n                }\r\n                else return \"One or more document fetches failed.\";\r\n\r\n            }\r\n            catch (Exception e) {\r\n                Log.d(TAG, e.toString());\r\n                return \"Update Event Failed\";\r\n            }\r\n            return \"user added to event\";\r\n        }\r\n    };\r\n\r\n    public ListenableFuture<String> createEvent(String name, Date date) {\r\n        return service.submit(new createEventRequest(name, date));\r\n    }\r\n    //Non-Blocking Event Creation Request\r\n    private class createEventRequest implements Callable<String> {\r\n        String name;\r\n        Date date;\r\n\r\n        public createEventRequest(String name, Date date) {\r\n            this.name = name;\r\n            this.date = date;\r\n        }\r\n\r\n        @Override\r\n        public String call() throws Exception {\r\n            Log.d(TAG, \"Event Creation Request started\");\r\n            Map<String, Object> eventDoc = new HashMap<>();\r\n            ArrayList<String> participants = new ArrayList<>(1);\r\n            participants.add(getAuth().getUid()); //\r\n            //get basic event data\r\n            eventDoc.put(\"eventName\", name);\r\n            eventDoc.put(\"eventStartDate\", date);\r\n            eventDoc.put(\"eventOwner\", getAuth().getUid());  //sets the owner to the creator\r\n            eventDoc.put(\"participants\", participants);  //adds an array list with just the event creator in it\r\n\r\n            DocumentReference targetUser = getUser().collection(\"Users\").document(Objects.requireNonNull(getAuth().getUid()));\r\n\r\n\r\n            Log.d(TAG, \"Retrieval Tasks started\");\r\n            //log status of document allocation\r\n            Task<DocumentReference> getEvent =  getUser().collection(\"Events\").add(eventDoc).addOnCompleteListener(task -> {\r\n                if(task.isSuccessful()) {\r\n                    DocumentReference doc = task.getResult();\r\n                }\r\n                else {\r\n                    Log.d(TAG, \"get failed with\" + task.getException());\r\n                }\r\n            }); //returns Event Snapshot\r\n            Task<DocumentSnapshot> getUser = targetUser.get().addOnCompleteListener(task -> {\r\n                if(task.isSuccessful()) {\r\n                    DocumentSnapshot doc = task.getResult();\r\n                    if (doc.exists()) {\r\n                        Log.d(TAG, \"User DocumentSnapshot data: \" + doc.getData());\r\n                    }\r\n                    else {\r\n                        Log.d(TAG, \"No Such Document\");\r\n                    }\r\n                }\r\n                else {\r\n                    Log.d(TAG, \"get failed with\" + task.getException());\r\n                }\r\n            }); //returns User Snapshot\r\n\r\n            try {\r\n                //wait for task completion\r\n                Log.d(TAG, \"Waiting for Event\");\r\n                Tasks.await(getEvent);\r\n                Log.d(TAG, \"Waiting for User\");\r\n                Tasks.await(getUser);\r\n\r\n                if (getEvent.isSuccessful() && getUser.isSuccessful()) {\r\n                    ArrayList<String> events = (ArrayList<String>)getUser.getResult().getData().get(\"Events\");\r\n                    assert events != null;\r\n                    events.add(getEvent.getResult().getId());\r\n                    targetUser.update(\"Events\", events);\r\n                    return getEvent.getResult().getId();\r\n                }\r\n                else return \"Failed to create Document.\";\r\n\r\n            }\r\n            catch (Exception e) {\r\n                Log.d(TAG, e.toString());\r\n                return \"Update Event Failed\";\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n\r\n    //Reads a user from the database with the matching document ID and returns Listenable Future for a user\r\n    public ListenableFuture<User> readUser(String UserID) {\r\n        return service.submit(new userCallback(UserID));\r\n    }\r\n    //callable class that makes a request to FireBase and constructs a user when it gets a response, fulfilling the future\r\n    private class userCallback implements Callable<User> {\r\n        String UserID;\r\n        userCallback(String UID) {UserID = UID;}\r\n        @Override\r\n        public User call() {\r\n            DocumentReference targetUser = getUser().collection(\"Users\").document(UserID);\r\n\r\n            //log status of document allocation\r\n            Task<DocumentSnapshot> callDB = targetUser.get().addOnCompleteListener(task -> {\r\n                if(task.isSuccessful()) {\r\n                    DocumentSnapshot doc = task.getResult();\r\n                    if (doc.exists()) {\r\n                        Log.d(TAG, \"DocumentSnapshot data: \" + doc.getData());\r\n                    }\r\n                    else {\r\n                        Log.d(TAG, \"No Such Document\");\r\n                    }\r\n                }\r\n                else {\r\n                    Log.d(TAG, \"get failed with\" + task.getException());\r\n                }\r\n            }); //returns DocumentSnapshot\r\n\r\n            try {\r\n                Tasks.await(callDB);\r\n                return new User(callDB.getResult());\r\n            }\r\n            catch (Exception e) {\r\n                return null;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    //Reads a user from the database with the matching document ID and returns Listenable Future for a user\r\n    public ListenableFuture<ArrayList<User>> readUser(ArrayList<String> UserIDs) {\r\n        return service.submit(new userListCallback(UserIDs));\r\n    }\r\n    //callable class that makes a request to FireBase and constructs a user when it gets a response, fulfilling the future\r\n    private class userListCallback implements Callable<ArrayList<User>> {\r\n        ArrayList<String> UserIDList;\r\n\r\n        userListCallback(ArrayList<String> UIDs) {\r\n            UserIDList = UIDs;\r\n        }\r\n\r\n        @Override\r\n        public ArrayList<User> call() {\r\n            ArrayList<User> retrievedUsers = new ArrayList<>(UserIDList.size());\r\n\r\n            Task<QuerySnapshot> callDB = getUser().collection(\"Users\").whereIn(FieldPath.documentId(), UserIDList).get().addOnCompleteListener(task -> {\r\n                if (task.isSuccessful()) {\r\n                    QuerySnapshot docs = task.getResult();\r\n                    if (docs.size() > 0) {\r\n                        Log.d(TAG, \"Retrieved \" + docs.size() + \" from firebase\");\r\n                    } else {\r\n                        Log.d(TAG, \"No Documents Retrieved\");\r\n                    }\r\n                } else {\r\n                    Log.d(TAG, \"get failed with\" + task.getException());\r\n                }\r\n            }); //returns DocumentSnapshot\r\n\r\n            try {\r\n                Tasks.await(callDB);\r\n                for (DocumentSnapshot user : callDB.getResult())\r\n                    retrievedUsers.add(new User(user));\r\n                return retrievedUsers;\r\n            } catch (Exception e) {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n\r\n    //Call event from firebase DB with eid\r\n    public ListenableFuture<Event> readEvent(String eventID) {\r\n        return service.submit(new eventCallback(eventID));\r\n    }\r\n    //Callable implemented class that returns a Future\r\n    private class eventCallback implements Callable<Event> {\r\n        String eventID;\r\n        eventCallback(String EID) {eventID = EID;}\r\n\r\n        public Event call() {\r\n            DocumentReference targetEvent = getUser().collection(\"Events\").document(eventID);\r\n\r\n            //log status of document allocation\r\n            Task<DocumentSnapshot> callDB = targetEvent.get().addOnCompleteListener(task -> {\r\n                if(task.isSuccessful()) {\r\n                    DocumentSnapshot doc = task.getResult();\r\n                    if (doc.exists()) {\r\n                        Log.d(TAG, \"DocumentSnapshot data: \" + doc.getData());\r\n                    }\r\n                    else {\r\n                        Log.d(TAG, \"No Such Document\");\r\n                    }\r\n                }\r\n                else {\r\n                    Log.d(TAG, \"get failed with\" + task.getException());\r\n                }\r\n            }); //returns DocumentSnapshot\r\n\r\n            try {\r\n                Tasks.await(callDB);\r\n                return new Event(callDB.getResult());\r\n            }\r\n            catch (Exception e) {\r\n                Log.d(TAG, e.toString());\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n\r\n    //Reads a event from the database with the matching document ID and returns Listenable Future for a user\r\n    public ListenableFuture<ArrayList<Event>> readEvent(ArrayList<String> eventIDs) {\r\n        return service.submit(new eventListCallback(eventIDs));\r\n    }\r\n    //callable class that makes a request to FireBase and constructs a user when it gets a response, fulfilling the future\r\n    private class eventListCallback implements Callable<ArrayList<Event>> {\r\n        ArrayList<String> EventIDList;\r\n\r\n        eventListCallback(ArrayList<String> EIDs) {\r\n            EventIDList = EIDs;\r\n        }\r\n\r\n        @Override\r\n        public ArrayList<Event> call() {\r\n            ArrayList<Event> retrievedUsers = new ArrayList<>(EventIDList.size());\r\n\r\n            Task<QuerySnapshot> callDB = getUser().collection(\"Events\").whereIn(FieldPath.documentId(), EventIDList).get().addOnCompleteListener(task -> {\r\n                if (task.isSuccessful()) {\r\n                    QuerySnapshot docs = task.getResult();\r\n                    if (docs.size() > 0) {\r\n                        Log.d(TAG, \"Retrieved \" + docs.size() + \" from firebase\");\r\n                    } else {\r\n                        Log.d(TAG, \"No Documents Retrieved\");\r\n                    }\r\n                } else {\r\n                    Log.d(TAG, \"get failed with\" + task.getException());\r\n                }\r\n            }); //returns DocumentSnapshot\r\n\r\n            try {\r\n                Tasks.await(callDB);\r\n                for (DocumentSnapshot event : callDB.getResult())\r\n                    retrievedUsers.add(new Event(event));\r\n                return retrievedUsers;\r\n            } catch (Exception e) {\r\n                Log.d(TAG, \"ERROR MAKING EVENT LIST: \" + e);\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n\r\n    //Call event from firebase DB with eid\r\n    public ListenableFuture<String> readGiftList(String eventID, String userID) {\r\n        return service.submit(new giftListCallback(eventID, userID));\r\n    }\r\n    //Callable implemented class that returns a Future\r\n    private class giftListCallback implements Callable<String> {\r\n        String eventID;\r\n        String userID;\r\n\r\n        public giftListCallback(String eventID, String userID) {\r\n            this.eventID = eventID;\r\n            this.userID = userID;\r\n        }\r\n\r\n        public String call() {\r\n            StringBuilder giftList = new StringBuilder();\r\n\r\n            DocumentReference targetEvent = getUser().collection(\"Events\").document(eventID);\r\n\r\n            //log status of document allocation\r\n            Task<DocumentSnapshot> callDB = targetEvent.get().addOnCompleteListener(task -> {\r\n                if(task.isSuccessful()) {\r\n                    DocumentSnapshot doc = task.getResult();\r\n                    if (doc.exists()) {\r\n                        Log.d(TAG, \"DocumentSnapshot data: \" + doc.getData());\r\n                    }\r\n                    else {\r\n                        Log.d(TAG, \"No Such Document\");\r\n                    }\r\n                }\r\n                else {\r\n                    Log.d(TAG, \"get failed with\" + task.getException());\r\n                }\r\n            }); //returns DocumentSnapshot\r\n\r\n            try {\r\n                Tasks.await(callDB);\r\n                DocumentSnapshot event = callDB.getResult();\r\n\r\n                Log.d(TAG, userID + \": \" + event.contains(userID));\r\n                for (String entry : (ArrayList<String>) Objects.requireNonNull(event.get(userID))) {\r\n                    giftList.append(entry).append(\"\\n\");\r\n                }\r\n                return giftList.toString();\r\n            }\r\n            catch (Exception e) {\r\n                Log.d(TAG, e.toString());\r\n                return \"No Gifts Found\";\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/giftly/handler/FireBaseClient.java b/app/src/main/java/com/example/giftly/handler/FireBaseClient.java
--- a/app/src/main/java/com/example/giftly/handler/FireBaseClient.java	(revision f25ba41e54e764cf62d2d9828e911f2d4293dd71)
+++ b/app/src/main/java/com/example/giftly/handler/FireBaseClient.java	(date 1679333311809)
@@ -1,17 +1,18 @@
-
-
-
-
 package com.example.giftly.handler;
 
 //all of by beautiful imports
 import static android.content.ContentValues.TAG;
+import static com.example.giftly.Giftly.client;
 import static com.example.giftly.Giftly.service;
 
 import android.util.Log;
 
+import com.example.giftly.DisplayEventScreen;
+import com.example.giftly.Giftly;
 import com.google.android.gms.tasks.Task;
 import com.google.android.gms.tasks.Tasks;
+import com.google.common.util.concurrent.FutureCallback;
+import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.firebase.auth.FirebaseAuth;
 import com.google.firebase.firestore.DocumentReference;
@@ -467,4 +468,4 @@
         }
     }
 
-}
+}
\ No newline at end of file
Index: app/src/main/java/com/example/giftly/HomeScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.giftly;\r\n\r\nimport static android.content.ContentValues.TAG;\r\nimport static com.example.giftly.Giftly.client;\r\n\r\nimport android.content.Context;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.Color;\r\nimport android.graphics.Typeface;\r\nimport android.graphics.drawable.GradientDrawable;\r\nimport android.os.Bundle;\r\nimport android.text.InputType;\r\nimport android.util.Log;\r\nimport android.view.Gravity;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.GridLayout;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport com.example.giftly.handler.*;\r\nimport com.google.common.util.concurrent.FutureCallback;\r\nimport com.google.common.util.concurrent.Futures;\r\n\r\nimport androidx.core.content.ContextCompat;\r\n\r\nimport android.content.Intent;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class HomeScreen extends AppCompatActivity {\r\n    public Button settingsBtn;\r\n    public Button addEventBtn;\r\n\r\n    public Button addGiftBtn;\r\n\r\n    public Button joinEventBtn;\r\n    private SharedPreferences sharedPreferences;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_home_screen);\r\n\r\n\r\n        //find Users name and display it to test readUser data\r\n        TextView display = findViewById(R.id.userNameDispl);\r\n        settingsBtn = (Button) findViewById(R.id.SettingsBtn);\r\n        settingsBtn.setBackgroundColor(Color.TRANSPARENT);\r\n        addEventBtn = (Button) findViewById(R.id.addEventBtn);\r\n        joinEventBtn = (Button)findViewById(R.id.joinEvent);\r\n\r\n            //Pop up when clicking join event\r\n            joinEventBtn.setOnClickListener(view -> {\r\n                View dialogView = LayoutInflater.from(HomeScreen.this).inflate(R.layout.join_event_dialog, null);\r\n                EditText input = dialogView.findViewById(R.id.event_id_input);\r\n\r\n                new AlertDialog.Builder(HomeScreen.this)\r\n                        .setView(dialogView)\r\n                        .setPositiveButton(\"Join\", (dialog, which) -> {\r\n                            String eventId = input.getText().toString();\r\n                            // TODO: Handle the event ID entered by the user\r\n                        })\r\n                        .setNegativeButton(\"Cancel\", (dialog, which) -> dialog.cancel())\r\n                        .show();\r\n            });\r\n\r\n\r\n            settingsBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(HomeScreen.this, SettingsScreen.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n\r\n        addEventBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(HomeScreen.this, AddEventScreen.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n\r\n        //This call will display the user's name in the greeting message\r\n        Futures.addCallback(\r\n                Giftly.client.readUser(client.getAuth().getUid()),\r\n                new FutureCallback<User>() {\r\n                    @Override\r\n                    public void onSuccess(User result) {\r\n                        display.setText(result.getFullName());\r\n                        //This call will display the user's name in the greeting message\r\n                        Futures.addCallback(\r\n                                Giftly.client.readEvent(result.getEvents()),\r\n                                new FutureCallback<ArrayList<Event>>() {\r\n                                    @Override\r\n                                    public void onSuccess(ArrayList<Event> events) {\r\n                                        //anon class for updating GUI thread\r\n                                        class updateEvents implements Runnable {\r\n                                            ArrayList<Event> events;\r\n                                            updateEvents(ArrayList<Event> e) { events = e;}\r\n                                            @Override\r\n                                            public void run() {\r\n                                                LinearLayout eventList = findViewById(R.id.events);\r\n                                                Log.d(TAG, \"Adding Events to List:\");\r\n\r\n                                                TextView header = new TextView(eventList.getContext());\r\n                                                header.setText(\"Ongoing Events\");\r\n                                                header.setTextSize(20);\r\n                                                header.setPadding(32, 32, 0, 32);\r\n                                                header.setGravity(Gravity.CENTER_VERTICAL);\r\n                                                header.setTextColor(Color.WHITE);\r\n                                                header.setTypeface(Typeface.create(\"sans-serif-medium\", Typeface.BOLD));\r\n                                                GridLayout.LayoutParams paramsHeader = new GridLayout.LayoutParams();\r\n                                                paramsHeader.width = GridLayout.LayoutParams.WRAP_CONTENT;\r\n                                                paramsHeader.height = GridLayout.LayoutParams.WRAP_CONTENT;\r\n                                                paramsHeader.setMargins(32, 0, 0, 0); //left, top, right, bottom\r\n                                                header.setLayoutParams(paramsHeader);\r\n                                                eventList.addView(header);\r\n\r\n                                                GridLayout gridLayout = new GridLayout(eventList.getContext());\r\n                                                gridLayout.setColumnCount(2); // set the number of columns you want\r\n                                                for (int i = 0; i < events.size(); i++) {\r\n                                                    Button button = new Button(eventList.getContext());\r\n                                                    button.setId(i);\r\n                                                    // Set the event name to lowercase\r\n                                                    String eventName = events.get(i).getEventName().toLowerCase();\r\n                                                    // Capitalize the first letter of the event name\r\n                                                    eventName = eventName.substring(0, 1).toUpperCase() + eventName.substring(1);\r\n\r\n\r\n                                                    button.setText(eventName);\r\n\r\n                                                    //Add button layout modification stuff to make it look nice here (target button)\r\n                                                    button.setOnClickListener(new handleClick(events.get(i).getEventID()));\r\n                                                    GridLayout.LayoutParams params = new GridLayout.LayoutParams();\r\n                                                    params.setMargins(16, 16, 16, 32); //left, top, right, bottom\r\n                                                    params.width = GridLayout.LayoutParams.WRAP_CONTENT;\r\n                                                    params.height = 350;\r\n                                                    button.setLayoutParams(params);\r\n\r\n                                                    // Set the button background to a drawable with rounded corners\r\n                                                    GradientDrawable shape = new GradientDrawable();\r\n                                                    shape.setShape(GradientDrawable.RECTANGLE);\r\n                                                    shape.setCornerRadii(new float[]{20, 20, 20, 20, 20, 20, 20, 20});\r\n                                                    shape.setColor(Color.parseColor(\"#4B4B4B\"));\r\n                                                    button.setBackground(shape);\r\n\r\n                                                    button.setTextColor(Color.WHITE);\r\n                                                    button.setTextSize(15);\r\n                                                    button.setTypeface(Typeface.create(\"sans-serif-medium\", Typeface.NORMAL));\r\n                                                    gridLayout.addView(button);\r\n                                                }\r\n                                                GridLayout.LayoutParams paramsGridLayout = new GridLayout.LayoutParams();\r\n                                                paramsGridLayout.width = GridLayout.LayoutParams.WRAP_CONTENT;\r\n                                                paramsGridLayout.height = GridLayout.LayoutParams.WRAP_CONTENT;\r\n                                                paramsGridLayout.setMargins(32, 0, 32, 0); //left, top, right, bottom\r\n                                                gridLayout.setLayoutParams(paramsGridLayout);\r\n                                                eventList.addView(gridLayout);\r\n\r\n\r\n\r\n                                            }\r\n\r\n                                            class handleClick implements View.OnClickListener {\r\n                                                String eventID;\r\n                                                handleClick(String eventID) {\r\n                                                    this.eventID = eventID;\r\n                                                }\r\n                                                @Override\r\n                                                public void onClick(View view) {\r\n                                                    Log.d(TAG, eventID);\r\n                                                    Intent intent = new Intent(getApplicationContext(),DisplayEventScreen.class);\r\n                                                    intent.putExtra(\"eventID\", eventID.toString());\r\n                                                    Log.d(TAG, \"Event ID: \" + intent.getStringExtra(\"eventID\"));\r\n                                                    startActivity(intent);\r\n                                                }\r\n                                            }\r\n\r\n                                        };\r\n                                        Log.d(TAG, events.toString());\r\n                                        //update events list on GUI thread using anon class\r\n                                        runOnUiThread(new updateEvents(events));\r\n                                    }\r\n                                    @Override\r\n                                    public void onFailure(Throwable thrown) {\r\n                                    }\r\n                                }, Giftly.service\r\n                        );\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Throwable thrown) {\r\n\r\n                    }\r\n                },\r\n                Giftly.service\r\n        );\r\n\r\n        //Theme: Fetch the current color of the background\r\n        sharedPreferences = getSharedPreferences(\"MyPrefs\", Context.MODE_PRIVATE);\r\n        int savedColor = sharedPreferences.getInt(\"BackgroundColor\", ContextCompat.getColor(HomeScreen.this, R.color.Default_color));\r\n        getWindow().getDecorView().setBackgroundColor(savedColor);\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        getMenuInflater().inflate(R.menu.profile_menu,menu);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n        if(item.getItemId() == R.id.menu_item_profile){\r\n            startActivity(new Intent(HomeScreen.this, ProfileScreen.class));\r\n        }\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/giftly/HomeScreen.java b/app/src/main/java/com/example/giftly/HomeScreen.java
--- a/app/src/main/java/com/example/giftly/HomeScreen.java	(revision f25ba41e54e764cf62d2d9828e911f2d4293dd71)
+++ b/app/src/main/java/com/example/giftly/HomeScreen.java	(date 1679333250189)
@@ -66,7 +66,10 @@
                         .setView(dialogView)
                         .setPositiveButton("Join", (dialog, which) -> {
                             String eventId = input.getText().toString();
-                            // TODO: Handle the event ID entered by the user
+
+
+
+
                         })
                         .setNegativeButton("Cancel", (dialog, which) -> dialog.cancel())
                         .show();
